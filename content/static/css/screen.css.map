{"version":3,"sources":["screen.css","config/_license.scss","../node_modules/accoutrement-type/sass/_helpers.scss","config/_fonts.scss","screen.scss","../node_modules/accoutrement-color/sass/_contrast.scss","config/_color.scss","../node_modules/accoutrement-type/sass/_fonts.scss","../node_modules/accoutrement-color/sass/_utils.scss","../node_modules/accoutrement-type/sass/_a11y.scss","../node_modules/accoutrement-type/sass/_pseudo-elements.scss","../node_modules/accoutrement-layout/sass/_queries.scss"],"names":[],"mappings":"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","file":"screen.css","sourcesContent":["@charset \"UTF-8\";\n/*!\n * Web Fonts from fontspring.com\n *\n * All OpenType features and all extended glyphs have been removed.\n * Fully installable fonts can be purchased at http://www.fontspring.com\n *\n * The fonts included in this stylesheet are subject to the End User License you purchased\n * from Fontspring. The fonts are protected under domestic and international trademark and\n * copyright law. You are prohibited from modifying, reverse engineering, duplicating, or\n * distributing this font software.\n *\n * (c) 2010-2015 Fontspring\n *\n *\n *\n *\n * The fonts included are copyrighted by the vendor listed below.\n *\n * Vendor:      FontSite Inc.\n * License URL: http://www.fontspring.com/licenses/fontsite/webfont\n *\n *\n */\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/serif/baskerville-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/serif/baskerville-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: italic;\n  font-weight: normal;\n  src: url(\"../fonts/serif/baskerville-italic-webfont.woff\") format(\"woff\"), url(\"../fonts/serif/baskerville-italic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/serif/baskerville-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/serif/baskerville-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: italic;\n  font-weight: bold;\n  src: url(\"../fonts/serif/baskerville-bolditalic-webfont.woff\") format(\"woff\"), url(\"../fonts/serif/baskerville-bolditalic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceSansPro\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/sans/sourcesanspro-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/sans/sourcesanspro-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceSansPro\";\n  font-style: italic;\n  font-weight: normal;\n  src: url(\"../fonts/sans/sourcesanspro-italic-webfont.woff\") format(\"woff\"), url(\"../fonts/sans/sourcesanspro-italic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceSansPro\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/sans/sourcesanspro-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/sans/sourcesanspro-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceSansPro\";\n  font-style: italic;\n  font-weight: bold;\n  src: url(\"../fonts/sans/sourcesanspro-bolditalic-webfont.woff\") format(\"woff\"), url(\"../fonts/sans/sourcesanspro-bolditalic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceCodePro\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/code/sourcecodepro-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/code/sourcecodepro-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"SourceCodePro\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/code/sourcecodepro-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/code/sourcecodepro-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudJJ\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/jj/greenmudjj-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/jj/greenmudjj-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudJJ\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/jj/greenmudjj-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/jj/greenmudjj-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudJJ\";\n  font-style: italic;\n  font-weight: normal;\n  src: url(\"../fonts/jj/greenmudjj-italic-webfont.woff\") format(\"woff\"), url(\"../fonts/jj/greenmudjj-italic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudSusy\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/susy/greenmudsusy-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/susy/greenmudsusy-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudSusy\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/susy/greenmudsusy-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/susy/greenmudsusy-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudSusy\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/susy/greenmudsusy-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/susy/greenmudsusy-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudSusy\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/susy/greenmudsusy-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/susy/greenmudsusy-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudNarrator\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"../fonts/narrator/greenmudnarrator-regular-webfont.woff\") format(\"woff\"), url(\"../fonts/narrator/greenmudnarrator-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"GreenMudNarrator\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"../fonts/narrator/greenmudnarrator-bold-webfont.woff\") format(\"woff\"), url(\"../fonts/narrator/greenmudnarrator-bold-webfont.ttf\") format(\"truetype\"); }\n\n:root {\n  background-color: #fff;\n  color: #111;\n  font-family: \"BaskervilleFS\", Baskerville, Palatino, Cambria, Georgia, serif;\n  font-size: calc(100% + 0.5vw);\n  line-height: 1.5em; }\n\nbody {\n  margin: 0 auto;\n  max-width: 35rem;\n  padding: 1rem; }\n\n.brand {\n  margin-bottom: 0; }\n\n[data-region='nav'] {\n  padding: 1rem 0; }\n\n[data-module] {\n  border-top: 2px dotted;\n  padding: 2rem 0; }\n\n.feature-actions {\n  margin: 1rem 0; }\n\na:link, a:visited {\n  color: #c30062; }\n\na:hover, a:focus, a:active {\n  text-decoration: none; }\n\npre,\ncode {\n  font-family: \"SourceCodePro\", Consolas, Menlo, Monaco, \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", monospace; }\n\nlabel,\nbutton {\n  cursor: pointer; }\n\n[type='submit'],\nbutton {\n  background: transparent;\n  border: 0;\n  color: inherit;\n  font: inherit;\n  margin: 0;\n  padding: 0; }\n\n.btn, .btn:link, .btn:visited {\n  background-color: #c30062;\n  color: #fff;\n  display: inline-block;\n  padding: 0.5rem 1rem;\n  text-decoration: none; }\n\n.is-hidden {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px; }\n\n[data-form-field],\n.form-label {\n  display: block; }\n\n[data-module='intro'] {\n  position: relative; }\n\n[data-intro='💅'] {\n  display: none; }\n\n[id='intro-toggle'] {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px; }\n  [id='intro-toggle']:not(:checked) ~ [for='intro-toggle']:before {\n    content: \"too much \"; }\n  [id='intro-toggle']:checked ~ [data-intro='💅'] {\n    display: block; }\n  [id='intro-toggle']:checked ~ [data-intro='💩'] {\n    display: none; }\n  [id='intro-toggle']:checked ~ [for='intro-toggle']:before {\n    content: \"give me back my \"; }\n\n[data-module='orgs-feature'] {\n  font-size: smaller; }\n  @media (min-width: 30em) {\n    [data-module='orgs-feature'] {\n      display: flex; } }\n  [data-module='orgs-feature'] blockquote {\n    margin: 0;\n    padding: 0; }\n\n.feature-org {\n  flex: 1 1 50%; }\n  @media (min-width: 30em) {\n    .feature-org + .feature-org {\n      margin-left: 1rem; } }\n\n[data-module='calendar'] {\n  position: relative; }\n\n.h-event {\n  margin: 2rem 0; }\n  .h-event .p-name {\n    margin: 0; }\n  [data-has-filters] .h-event {\n    display: none; }\n\n.filter-label {\n  display: inline-block;\n  font-size: smaller;\n  padding: 0.25rem; }\n  .filter-label:before {\n    content: \"✖ \"; }\n\n.filter-value {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px; }\n  .filter-value:checked + .filter-label:before {\n    content: \"✔ \"; }\n\n[id='filter-all']:checked ~ [data-tags] {\n  display: block; }\n\n[id='filter-performance']:checked ~ [data-tags~='performance'] {\n  display: block; }\n\n[id='filter-speaking']:checked ~ [data-tags~='speaking'] {\n  display: block; }\n\n[id='filter-art']:checked ~ [data-tags~='art'] {\n  display: block; }\n\n[id='filter-publication']:checked ~ [data-tags~='publication'] {\n  display: block; }\n\n[id='filter-album']:checked ~ [data-tags~='album'] {\n  display: block; }\n\n[id='filter-film']:checked ~ [data-tags~='film'] {\n  display: block; }\n\n.video {\n  height: 0;\n  margin-bottom: 1rem;\n  position: relative; }\n\n.video-wrap {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0; }\n  .video-wrap iframe {\n    height: 100%;\n    width: 100%; }\n\n[data-region='contentinfo'] {\n  font-family: \"SourceSansPro\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  border-top: 2px dotted;\n  font-size: smaller;\n  padding-top: 0.5rem;\n  text-align: center; }\n","/*!\n * Web Fonts from fontspring.com\n *\n * All OpenType features and all extended glyphs have been removed.\n * Fully installable fonts can be purchased at http://www.fontspring.com\n *\n * The fonts included in this stylesheet are subject to the End User License you purchased\n * from Fontspring. The fonts are protected under domestic and international trademark and\n * copyright law. You are prohibited from modifying, reverse engineering, duplicating, or\n * distributing this font software.\n *\n * (c) 2010-2015 Fontspring\n *\n *\n *\n *\n * The fonts included are copyrighted by the vendor listed below.\n *\n * Vendor:      FontSite Inc.\n * License URL: http://www.fontspring.com/licenses/fontsite/webfont\n *\n *\n */\n","// Internal Font Helpers\n// =====================\n\n$_font-style-options: 'italic' 'oblique';\n$_font-weight-options: 100 200 300 400 500 600 700 800 900 'bold';\n$_font-format-options: (\n  'ttf': 'truetype',\n  'otf': 'opentype',\n  'woff': 'woff',\n  'woff2': 'woff2',\n  'svg': 'svg',\n  'svgz': 'svg',\n  'eot': 'embedded-opentype',\n);\n\n\n// Font Get\n// --------\n/// Get a font from the `$fonts` map.\n/// @access private\n@function _font-get(\n  $key\n) {\n  $font: map-get($fonts, $key);\n\n  @if not $font {\n    @error '#{$key} is not defined in your `$fonts` configuration map.';\n  } @else if map-has-key($fonts, $font) {\n    $font: _font-get($font);\n  }\n\n  @return $font;\n}\n\n\n// Font Src\n// --------\n/// Get the font `src` value for a given font path and format.\n/// @access private\n@function _font-src(\n  $path,\n  $format,\n  $suffix: ''\n) {\n  $url: $path + '.' + $format + $suffix;\n  $format: map-get($_font-format-options, $format);\n\n  @return font-url($url) format($format);\n}\n\n\n// Parse Font Variant\n// -------------------\n/// Parse a list of font variants into a map of styles and weights.\n/// @access private\n/// @param {List} $variant -\n///   A list of font variants, such as `('bold', 'italic')`.\n/// @return {$map} -\n///   A map of `style` and `weight` values.\n@function _parse-font-variant(\n  $variant\n) {\n  $return: (\n    'style': 'normal',\n    'weight': 'normal',\n  );\n\n  @each $item in $variant {\n    @if index($_font-style-options, $item) {\n      $return: map-merge($return, ('style': $item));\n    } @else if index($_font-weight-options, $item) {\n      $return: map-merge($return, ('weight': $item));\n    }\n  }\n\n  @return $return;\n}\n\n\n// Import Font-Face [mixin]\n// ------------------------\n/// A wrapper utility for the CSS `@font-face` block.\n/// @access private\n/// @param {String} $name -\n///   The font name.\n/// @param {String} $path -\n///   Path to the font files (leaving off the file format indicator).\n/// @param {String | List} $variant [('normal', 'normal')] -\n///   The font-style and font-weight properties.\n/// @param {List} $formats -\n///   The font formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin _import-font-face(\n  $name,\n  $path,\n  $variant: ('normal', 'normal'),\n  $formats: $font-formats\n) {\n  $variant: _parse-font-variant($variant);\n  $src: ();\n\n  @each $format in $formats {\n    $suffix: '';\n\n    @if ($format == 'eot') {\n      $suffix: '?#iefix';\n    } @else if index(('svg', 'svgz'), $format) {\n      $suffix: '#' + $name;\n    }\n\n    $item: _font-src($path, $format, $suffix);\n    $src: append($src, $item, 'comma');\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: unquote(map-get($variant, 'style'));\n    font-weight: unquote(map-get($variant, 'weight'));\n\n    @if index($formats, 'eot') {\n      // IE9 compat mode (eot)\n      src: _font-src($path, 'eot');\n    }\n\n    // IE6-IE8 (eot) - with '?#iefix'\n    // Modern Browsers (woff, woff2)\n    // Safari, Android, iOS (ttf, otf)\n    // Legacy iOS (svg, svgz) - with '#svgName'\n    src: $src;\n  }\n}\n","// Fonts Config\n// ============\n\n@import '../../node_modules/accoutrement-type/sass/type';\n\n$body-font: (\n  'name': 'BaskervilleFS',\n  'stack': (Baskerville, Palatino, Cambria, Georgia, serif),\n  'regular': 'serif/baskerville-regular-webfont',\n  'italic': 'serif/baskerville-italic-webfont',\n  'bold': 'serif/baskerville-bold-webfont',\n  'bold' 'italic': 'serif/baskerville-bolditalic-webfont',\n);\n\n$boiler-font: (\n  'name': 'SourceSansPro',\n  'stack': ('Helvetica Neue', Helvetica, Arial, sans-serif),\n  'regular': 'sans/sourcesanspro-regular-webfont',\n  'italic': 'sans/sourcesanspro-italic-webfont',\n  'bold': 'sans/sourcesanspro-bold-webfont',\n  'bold' 'italic': 'sans/sourcesanspro-bolditalic-webfont',\n);\n\n$code-font: (\n  'name': 'SourceCodePro',\n  'stack': (Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace),\n  'regular': 'code/sourcecodepro-regular-webfont',\n  'bold': 'code/sourcecodepro-bold-webfont',\n);\n\n$jj-font: (\n  'name': 'GreenMudJJ',\n  'stack': ('BaskervilleFS', Baskerville, Palatino, Cambria, Georgia, serif),\n  'regular': 'jj/greenmudjj-regular-webfont',\n  'bold': 'jj/greenmudjj-bold-webfont',\n  'italic': 'jj/greenmudjj-italic-webfont',\n);\n\n$susy-font: (\n  'name': 'GreenMudSusy',\n  'stack': ('SourceSansPro', 'Helvetica Neue', Helvetica, Arial, sans-serif),\n  'regular': 'susy/greenmudsusy-regular-webfont',\n  'bold': 'susy/greenmudsusy-bold-webfont',\n);\n\n$susycaps-font: (\n  'name': 'GreenMudSusyCaps',\n  'stack': ('SourceSansPro', 'Helvetica Neue', Helvetica, Arial, sans-serif),\n  'regular': 'susy/greenmudsusy-smallcaps-webfont',\n  'bold': 'susy/greenmudsusy-smallcapsbold-webfont',\n);\n\n$narrator-font: (\n  'name': 'GreenMudNarrator',\n  'stack': ('BaskervilleFS', Baskerville, Palatino, Cambria, Georgia, serif),\n  'regular': 'narrator/greenmudnarrator-regular-webfont',\n  'bold': 'narrator/greenmudnarrator-bold-webfont',\n);\n\n$fonts: (\n  'body': $body-font,\n  'boilerplate': $boiler-font,\n  'code': $code-font,\n  'jj': $jj-font,\n  'susy': $susy-font,\n  'susycaps': $susy-font,\n  'narrator': $narrator-font,\n);\n","// Screen\n// ======\n\n@import 'config/manifest';\n@import '../node_modules/accoutrement-layout/sass/layout';\n\n\n// Root\n// ----\n\n@include import-webfonts;\n\n:root {\n  @include contrasted('background');\n  @include font-family('body');\n  font-size: calc(100% + 0.5vw);\n  line-height: 1.5em;\n}\n\nbody {\n  margin: 0 auto;\n  max-width: 35rem;\n  padding: 1rem;\n}\n\n.brand {\n  margin-bottom: 0;\n}\n\n[data-region='nav'] {\n  padding: 1rem 0;\n}\n\n[data-module] {\n  border-top: 2px dotted;\n  padding: 2rem 0;\n}\n\n.feature-actions {\n  margin: 1rem 0;\n}\n\n\n// Type\n// ----\n\na {\n  &:link,\n  &:visited {\n    color: color('action');\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    text-decoration: none;\n  }\n}\n\npre,\ncode {\n  @include font-family('code');\n}\n\nlabel,\nbutton {\n  cursor: pointer;\n}\n\n[type='submit'],\nbutton {\n  background: transparent;\n  border: 0;\n  color: inherit;\n  font: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n.btn {\n  &,\n  &:link,\n  &:visited {\n    @include contrasted('action');\n    display: inline-block;\n    padding: 0.5rem 1rem;\n    text-decoration: none;\n  }\n}\n\n.is-hidden {\n  @include is-hidden;\n}\n\n\n// Forms\n// -----\n\n[data-form-field],\n.form-label {\n  display: block;\n}\n\n\n// Intro\n// -----\n\n[data-module='intro'] {\n  position: relative;\n}\n\n[data-intro='💅'] {\n  display: none;\n}\n\n[id='intro-toggle'] {\n  @include is-hidden;\n\n  &:not(:checked) {\n    ~ [for='intro-toggle'] {\n      @include before('too much ');\n    }\n  }\n\n  &:checked {\n    ~ [data-intro='💅'] {\n      display: block;\n    }\n\n    ~ [data-intro='💩'] {\n      display: none;\n    }\n\n    ~ [for='intro-toggle'] {\n      @include before('give me back my ');\n    }\n  }\n}\n\n[data-module='orgs-feature'] {\n  font-size: smaller;\n\n  @include above(30em) {\n    display: flex;\n  }\n\n  blockquote {\n    margin: 0;\n    padding: 0;\n  }\n}\n\n.feature-org {\n  flex: 1 1 50%;\n\n  @include above(30em) {\n    & + & {\n      margin-left: 1rem;\n    }\n  }\n}\n\n\n// Calendar\n// --------\n\n$event-types: (\n  'performance',\n  'speaking',\n  'art',\n  'publication',\n  'album',\n  'film',\n);\n\n[data-module='calendar'] {\n  position: relative;\n}\n\n.h-event {\n  margin: 2rem 0;\n\n  .p-name {\n    margin: 0;\n  }\n\n  [data-has-filters] & {\n    display: none;\n  }\n}\n\n.filter-label {\n  @include before('✖ ');\n  display: inline-block;\n  font-size: smaller;\n  padding: 0.25rem;\n}\n\n.filter-value {\n  @include is-hidden;\n\n  &:checked {\n    + .filter-label {\n      @include before('✔ ');\n    }\n  }\n}\n\n[id='filter-all'] {\n  &:checked {\n    ~ [data-tags] {\n      display: block;\n    }\n  }\n}\n\n@each $type in $event-types {\n  [id='filter-#{$type}'] {\n    &:checked {\n      ~ [data-tags~='#{$type}'] {\n        display: block;\n      }\n    }\n  }\n}\n\n\n// Media\n// -----\n\n.video {\n  height: 0;\n  margin-bottom: 1rem;\n  position: relative;\n}\n\n.video-wrap {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n\n  iframe {\n    height: 100%;\n    width: 100%;\n  }\n}\n\n\n// Footer\n// ------\n\n[data-region='contentinfo'] {\n  @include font-family('boilerplate');\n  border-top: 2px dotted;\n  font-size: smaller;\n  padding-top: 0.5rem;\n  text-align: center;\n}\n","// Color Contrast\n// ==============\n\n\n// WCAG Contrast\n// -------------\n/// Contrast ratios from the WCAG.\n/// @access private\n$wcag-contrast: (\n  'aa-large': 3,\n  'aa': 4.5,\n  'aaa': 7,\n);\n\n\n// Luminance\n// ---------\n/// Get the WCAG luminance of a color in your palette.\n/// **Warning**: Calculating luminance requires a `pow()` function\n/// like the one available in\n/// [MathSass](https://github.com/terkel/mathsass/blob/master/dist/functions/_pow.scss),\n/// which is not included in this library.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n@function luminance(\n  $color\n) {\n  $color: color($color);\n  $luminance: 0;\n\n  @if not function-exists('pow') {\n    @error 'Luminance and contrast calculations require a `pow()` function '\n    + 'like the one available from MathSass.';\n  }\n\n  @if (type-of($color) != 'color') {\n    @error '`#{$color}` is not a color.';\n  }\n\n  @each $component in 'red' 'green' 'blue' {\n    $value: call($component, $color) / 255;\n\n    @if ($value < 0.03928) {\n      $value: $value / 12.92;\n    } @else {\n      $value: pow((($value + 0.055) / 1.055), 2.4);\n    }\n\n    @if ($component == 'red') {\n      $value: $value * 0.2126;\n    } @else if ($component == 'green') {\n      $value: $value * 0.7152;\n    } @else {\n      $value: $value * 0.0722;\n    }\n\n    $luminance: $luminance + $value;\n  }\n\n  @return $luminance;\n}\n\n\n// Contrast Ratio\n// --------------\n/// Get the WCAG contrast-ratio between any two colors in your palette.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n///\n/// @param {string | list | number} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {string | list | number} $contrast -\n///   The name of a color to contrast against the first,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {'aa' | 'aa-large' | 'aaa' | Number | false} $require [false] -\n///   An optional contrast ratio to require.\n///   The function will throw a warning if the required ratio is not met.\n@function contrast-ratio(\n  $base,\n  $contrast,\n  $require: false\n) {\n  $is-lumins: (type-of($base) == 'number');\n\n  $base-lumin: if($is-lumins, $base, luminance($base));\n  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));\n\n  $darker: min($base-lumin, $contrast-lumin);\n  $lighter: max($base-lumin, $contrast-lumin);\n\n  $ratio: ($lighter + 0.05) / ($darker + 0.05);\n  $require: map-get($wcag-contrast, $require) or $require;\n\n  @if $require and ($ratio < $require) {\n    @warn 'The contrast ratio between `#{$base}` and `#{$contrast}` is '\n    + '#{$ratio}, but a ratio of #{$require} or more is required.';\n  }\n\n  @return $ratio;\n}\n\n\n// Contrast\n// --------\n/// For any color, select the best contrast among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options [#000, #fff] -\n///   Colors to contrast against.\n///   Will use `contrast-light` and `contrast-dark` as defaults\n///   if they are defined in your color palette.\n/// @return {Color} -\n///   Whichever option has the highest contrast-ratio to `$color`.\n@function contrast(\n  $color,\n  $options...\n) {\n  // Establish default options if they are missing\n  @if length($options) == 0 {\n    $options: append($options, map-get($colors, 'contrast-light') or #fff);\n    $options: append($options, map-get($colors, 'contrast-dark') or #000);\n  } @else if length($options) == 1 {\n    @error 'Provide at least two contrasting color options for `contrast()`';\n  }\n\n  // Get the colors and their contrasts\n  $color-val: color($color);\n  $color-lum: luminance($color-val);\n  $color-list: ();\n  $contrast-list: ();\n\n  @each $item in $options {\n    $item: color($item);\n    $luminance: luminance($item);\n    $contrast: contrast-ratio($color-lum, $luminance);\n\n    $color-list: append($color-list, $item);\n    $contrast-list: append($contrast-list, $contrast);\n  }\n\n  // Find the best results\n  $best-ratio: max($contrast-list...);\n  $best-color: nth($color-list, index($contrast-list, $best-ratio));\n\n  @return $best-color;\n}\n\n\n// Contrasted\n// ----------\n/// For any background color,\n/// select the best contrasting text color among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $background -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options -\n///   Colors to contrast against.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and the foreground `color` to\n///   whichever option has better contrast against the given background.\n@mixin contrasted(\n  $background,\n  $options...\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $options...);\n}\n","// Color Config\n// ============\n\n@import '../../node_modules/mathsass/dist/math';\n@import '../../node_modules/accoutrement-color/sass/color';\n\n$brand-colors: (\n  'white': #fff,\n  'black': #111,\n\n  'blue': hsl(195, 100%, 43%),\n  'red': hsl(0, 100%, 50%),\n  'pink': hsl(330, 100%, 45%),\n);\n\n$theme-colors: (\n  'background': 'white',\n  'text': 'black',\n\n  'action': 'pink' ('shade': 15%),\n  'accent': 'blue' ('shade': 15%),\n\n  'border': 'action',\n\n  'contrast-light': 'white',\n  'contrast-dark': 'black',\n);\n\n$colors: map-merge($brand-colors, $theme-colors);\n\n","// Fonts API\n// =========\n\n\n// Font Formats\n// ------------\n/// The file formats to include when importing a font-face.\n/// @group config\n/// @type List\n$font-formats: 'woff' 'ttf' !default;\n\n\n// Font Path\n// ---------\n/// The path to your fonts directory,\n/// often relative to your output CSS.\n/// @group config\n/// @type String\n$font-path: '../fonts/' !default;\n\n\n// Fonts\n// -----\n/// A map for managing all your fonts on a project.\n/// @group config\n/// @type Map\n/// @example scss -\n///   $fonts: (\n///     'sans': (\n///       'name': 'FranklinGothic',\n///       'stack': ('Helvetica', 'Arial', 'sans-serif'),\n///       'regular': 'franklingothic-regular-filename',\n///       'bold': 'franklingothic-bold-filename',\n///       'bold' 'italic': 'franklingothic-bolditalic-filename',\n///     ),\n///   );\n$fonts: () !default;\n\n\n// Font-URL [function]\n// -------------------\n/// Get a CSS-ready URL function (`url('my/path')`) with\n/// the full path to a file in the fonts directory.\n/// @group fonts\n/// @param {String} $path -\n///   A path relative to the fonts directory.\n/// @return {String} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  $full-path: quote($font-path + $path);\n  @return url($full-path);\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key\n) {\n  $font: map-get($fonts, $key);\n  $name: map-get($font, 'name') or $key;\n  @return join($name, map-get($font, 'stack'), 'comma');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n@mixin font-family(\n  $key\n) {\n  font-family: font-family($key);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any webfont defined in your `$fonts` configuration.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin font-face(\n  $key,\n  $formats: $font-formats\n) {\n  $var-options: join($_font-style-options, $_font-weight-options);\n  $var-options: join($var-options, ('normal', 'regular'));\n  $font: _font-get($key);\n  $name: $key;\n  $variants: ();\n\n  @each $key, $value in $font {\n    $first: nth($key, 1);\n\n    @if ($first == 'name') {\n      $name: $value;\n    } @else if index($var-options, $first) {\n      $variants: map-merge($variants, ($key: $value));\n    }\n  }\n\n  @if (length($variants) > 0) {\n    @each $variant, $path in $variants {\n      $variant: if(($variant == 'regular'), 'normal', $variant);\n      @include _import-font-face($name, $path, $variant, $formats);\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Import webfonts from your font config list.\n/// @group fonts\n/// @param {Map} $fonts [$fonts] -\n///   A map of your font configuration.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin import-webfonts(\n  $fonts: $fonts,\n  $formats: $font-formats\n) {\n  @each $key, $value in $fonts {\n    @if type-of($value) == 'map' {\n      @include font-face($key, $font-formats);\n    }\n  }\n}\n","// Color Utilities\n// ===============\n\n\n// Tint\n// ----\n/// Mix a color with `white` to get a lighter tint.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of white to mix in.\n///   Higher percentages will result in a lighter tint.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n/// Mix a color with `black` to get a darker shade.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of black to mix in.\n///   Higher percentages will result in a darker shade.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n","// Hidden\n// ======\n\n\n// Is Hidden -- Position\n// ---------------------\n/// Hide an element by positioning it off the page.\n/// @group a11y\n/// @access private\n@mixin is-hidden--position {\n  left: -9999px;\n  position: absolute;\n  top: -9999px;\n}\n\n\n// Is Hidden -- Clip\n// -----------------\n/// Hide an element by clipping it in place.\n/// @group a11y\n/// @access private\n@mixin is-hidden--clip {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px;\n}\n\n\n// Is Hidden\n// ---------\n/// Hide an element using either the `clip` or `position` method.\n/// @group a11y\n/// @param {'clip' | 'position'} $method ['clip'] -\n///   The hiding method to use.\n@mixin is-hidden(\n  $method: 'clip'\n) {\n  @if $method == 'position' {\n    @include is-hidden--position;\n  } @else {\n    @include is-hidden--clip;\n  }\n}\n","// Pseudo Elements\n// ===============\n\n\n// Before\n// ------\n/// Add generated content `:before` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin before(\n  $content\n) {\n  &:before {\n    content: $content;\n    @content;\n  }\n}\n\n\n// After\n// -----\n/// Add generated content `:after` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin after(\n  $content\n) {\n  &:after {\n    content: $content;\n    @content;\n  }\n}\n\n\n// Wrap Content\n// ------------\n/// Add generated content `:before` and `:after` an element.\n/// @group pseudo\n/// @param {List} $content -\n///   One or two values to be used for the `content` property.\n///   A single string will be used `:before` and `:after`.\n@mixin wrap-content(\n  $content: '“' '”'\n) {\n  $_before: nth($content, 1);\n\n  &:before,\n  &:after {\n    content: $_before;\n    @content;\n  }\n\n  @if length($content) > 1 {\n    &:after { content: nth($content, 2); }\n  }\n}\n","// Media Queries\n// =============\n\n\n\n// Accoutrement Query Context\n// --------------------------\n$accoutrement-query-context: ();\n\n\n\n// Get Breakpoint [function]\n// -------------------------\n@function _get-breakpoint(\n  $break\n) {\n  @if function-exists('browser-ems') {\n    @return browser-ems($break);\n  } @else if function-exists('size') {\n    @return size($break);\n  } @else if variable-exists('sizes') {\n    @return map-get($sizes, $break) or $break;\n  } @else if variable-exists('breakpoints') {\n    $break: map-get($breakpoints, $break) or $break;\n\n    @if map-has-key($breakpoints, $break) {\n      $break: _get-breakpoint($break);\n    }\n  }\n\n  @return $break;\n}\n\n\n\n// Apply Query [mixin]\n// -------------------\n@mixin _apply-query(\n  $name,\n  $query\n) {\n  $context: ($name: $query);\n  $context: map-merge($accoutrement-query-context, $context);\n  $accoutrement-query-context: $context !global;\n\n  @media #{$query} {\n    @content;\n  }\n\n  $accoutrement-query-context: map-remove($accoutrement-query-context, $name) !global;\n}\n\n\n\n// Below [mixin]\n// -------------\n@mixin below(\n  $max,\n  $prop: 'width'\n) {\n  $name: 'below `#{$max}`';\n  $max: _get-breakpoint($max);\n  $query: '(max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Above [mixin]\n// -------------\n@mixin above(\n  $min,\n  $prop: 'width'\n) {\n  $name: 'above `#{$min}`';\n  $min: _get-breakpoint($min);\n  $query: '(min-#{$prop}: #{$min})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Between [mixin]\n// ---------------\n@mixin between(\n  $min,\n  $max,\n  $prop: 'width'\n) {\n  $name: 'between `#{$min}` and `#{$max}`';\n  $min: _get-breakpoint($min);\n  $max: _get-breakpoint($max);\n  $query: '(min-#{$prop}: #{$min}) and (max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n"],"sourceRoot":"/source/"}